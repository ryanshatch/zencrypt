"""
********************************************************************************************
* models.py                        |********************************************************
* Developed by: Ryan Hatch         |********************************************************
* Date: August 10th 2022           |********************************************************
* Last Updated: January 27th 2025  |********************************************************
* Version: 5.3-A3                  |********************************************************
********************************************************************************************
********************************#* Description: |*******************************************
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
|  models.py is a module that contains the database models for the web-app.                *
*    SQLite / SQLAlchemy to define the models and their relationships. The models are:     *
*       - User: stores the user information.                                               *
*       - Hash: stores the hashes generated by the user.                                   *
*       - EncryptedText: stores the encrypted texts generated by the user.                 *
*       - Key: stores the keys generated by the user.                                      *
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
********************************************************************************************
"""

#* ---------------------- | Import libraries for the web-app | ---------------------- *#
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

#* ---------------------- | Database Models | --------------------- *#
db = SQLAlchemy()

#* ---------------------- | User Model | -------------------------- *#
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(256), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    #* Shared resources for the user
    hashes = db.relationship('Hash', backref='user', lazy=True)                     # hashes, encrypted texts, and keys are linked to the users 'user_id'
    encrypted_texts = db.relationship('EncryptedText', backref='user', lazy=True)   # Related objects are loaded in a single query for efficiency

#* ---------------------- | Hash Model | ------------------------- *#
class Hash(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    hash_value = db.Column(db.String(256), nullable=False)
    salt = db.Column(db.String(256))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

#* ---------------------- | Encrypted Text Model | --------------- *#
class EncryptedText(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    encrypted_content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

#* ---------------------- | Key Model | ------------------------- *#
class Key(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key_value = db.Column(db.String(256), nullable=False)
    active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)